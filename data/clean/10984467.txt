10984467.txt 0 exploring performance issues     clinical database organized using an entityattributevalue representation
10984467.txt 1 abstractbackground   entityattributevalue representation   classes   relationships eavcr provides   flexible   simple database schema   store heterogeneous biomedical data   certain circumstances however   eavcr model   known   retrieve data less efficiently than conventionally based database schemas objective   perform   pilot study   systematically quantifies performance differences   database queries directed   realworld microbiology data modeled   eavcr   conventional representations     explore   relative merits   different eavcr query implementation strategies methods clinical microbiology data obtained over   tenyear period were stored using both database models query execution times were compared   four clinically oriented attributecentered   entitycentered queries operating under varying conditions   database size   system memory   performance characteristics   three different eavcr query strategies were also examined results performance was similar   entitycentered queries     two database models performance     eavcr model was approximately three   five times less efficient than its conventional counterpart   attributecentered queries   differences   query efficiency became slightly greater   database size increased although   were reduced     addition   system memory   authors found   eavcr queries formulated using multiple simple sql statements executed   batch were   efficient than single large sql statements conclusion   paper describes   pilot project   explore issues     compare query performance   eavcr   conventional database representations although attributecentered queries were less efficient     eavcr model these inefficiencies may   addressable   least   part     use     powerful hardware     memory   both
10984467.txt 2 
10984467.txt 3   problem   data modelers commonly encounter     biomedical domain   organizing   storing highly diverse   heterogeneous data   example   single patient may have thousands   applicable descriptive parameters       need     easily accessible   an electronic patient record system these requirements pose significant modeling   implementation challenges one increasingly popular solution   addresses these issues     model data using   entityattributevalue eav approach   model   was historically seen first   lisp association lists has been used   multiple applications including   help system     columbiapresbyterian clinical data repository   eav approach offers many advantages including its flexibility   ability   store heterogeneous data     simple easily maintained format   group has recently enhanced   representation   permit data modeling   classes   relationships eavcr despite its significant benefits eav design has   potential     less efficient than conventional database schemas when accessing data   particular attributecentered queries where   query criterion   based     value     particular attribute   most likely   show impaired performance     especially true when query criteria combine one     simple conditions   boolean fashion an example   such   query   find   patients   blood cultures positive   either streptococcus pneumoniae   candida albicans   reason     potential performance degradation       relatively fast         operations   would   required     were operating   conventional schema tables must   converted   considerably slower setbased equivalents set intersection union   difference respectively   eav tables attributecentered queries   important   research questions their performance     critical     care   individual patients   contents     production patientcare database serve however     basis   any research databases   an institution must support     question   how such research databases must   implemented     two ways          first solution   easy   set up   queries may   perform well   second solution promises better performance       elaborate because     data transformations involved   required transformations can   extensive   one has   support multiple research efforts   determine   solution   applicable   given circumstances   would   useful   have performance metrics   compare   relative performance   attributecentric queries   eav schemas   equivalent queries   conventional schemas   have   found any published reports   quantify these performance differences systematically   related interest     influences   query performance exerted   factors including database size   hardware configuration eg amount   available physical memory   questions addressed     paper    answers   these questions would provide valuable insights into   viability     eav approach   supporting largescale databases     paper   explore issues   database performance   realworld microbiology data stored using an eavcr   conventional approach   particular   examine 1   differences   execution time     set   clinically relevant database queries operating   an eavcr   conventional schema containing   same set   data 2   relative efficiency   different eavcr query strategies   3   effect   database size   physical memory   database performance finally   examine monitors   system performance   identify potential performance bottlenecks     competing database schemas
10984467.txt 4   eav model   has been described   great detail elsewhere can   visualized conceptually     database table   three columns 1 entity id   object id 2 attribute     pointer     separate attributes table   3 value containing   value corresponding     particular entity   attribute   an electronic patient record system   entity id usually refers     specific patientassociated event stored     patient id   time stamp   attribute   value columns correspond     specific parameter eg potassium   its value respectively each entityattributevalue triplet occupies one row     table since attributes     represented   columns   single table can store   values     database eavcr enhances   basic eav approach   using   objectoriented concepts   classes   relationships   facilitate data modeling classes   eavcr   data structures   store   attributes possibly including other classes associated     particular type   entity   example   bacterial isolate     blood culture could   modeled     class bacterial organism   contains attributes organismid   references an organism name quantitycultured   antimicrobialtested   last attribute   multivalued because multiple antimicrobials   typically tested against   single culture antimicrobialtested   turn   itself   class     attributes antimicrobialid   references   drug name   sensitivityresult     objectoriented modeling objects represent instances     class thus     previous example every cultured bacterial isolate possesses an object id   an instantiation   class bacterial organism relationships   used   describe interclass interactions metadata   information about   data contained     database     applied   describe maintain update   access   data   overall approach allows   system   incorporate new attributes without altering   underlying physical database schema conventional schemas   contrast model parameters   distinct columns   example   parameter organismname could   represented     column     table microbialorganism     database evolves   accommodate diverse data   number   parameters grows     number   columns   tables     needed increases thus     rapidly evolving   expanding domain such   medicine where new tests   concepts   commonplace   underlying schema requires frequent modification     particularly true   clinical medicine where   can   dozens   specialtyspecific tables each     constantly growing list   fields   ability     eav approach   store diverse data     single   few tables greatly simplifies   physical schema     database   provides an efficient way   access   data pertinent     specific object  e entitycentered queries   an emr   often takes   form   select   data clinical findings lab tests etc   patient x     conventional schema   numerous tables   user would need   search every table containing patient data   extract   relevant data     patient making query development laborious furthermore     these tables may contain data     given patient     result many tables may   searched unnecessarily   stated previously       attributecentered queries       concern     developer who   focused   efficiency   systematically quantify   performance   an eavcr schema compared   its conventional counterpart   chose   domain   microbiology   domain   has been   subject   many previous database models provides   potential   work   complex data structures where class attributes exist   both primitive types eg strings   well   other classes
10984467.txt 5     section   describe   test database   schema   various aspects     evaluation strategy     devised   each case   provide   rationale     design decisions data description  each specimen collected     patient     veterans administration va system   assigned   unique id   id     ordering physician   also recorded against   specimen one     tests eg gram stain   culture may     run   each specimen   each culture   panel   antimicrobial sensitivity tests   performed   data   stored   dhcp an m language database   serves     clinical patient repository used nationwide   va medical center vamc hospitals   entityrelationship diagram     original data   shown    details have been omitted   clarity   classesentities can   traced     class microbiology specimen   sits     top     class diagram classes contain either primitive types   other classes   attributes   enable classes   relate   one another    should   noted     entities bacterial culture fungal culture etc shown      represented   separate tables   dhcp during   process   data transformation   merged these into   single table since   separate tables have similar structures   original raw antimicrobial sensitivity data had   names   antimicrobials eg streptomycin chloramphenicol hardcoded   columns     table   represents poor table design   each new antimicrobial introduced into   institution   table structure needs updating     forms dependent     table require redesign   each change   may   possible   use   design     m language where   diskbased data structures   sparse   design   relational database management systems rdbmss however such   design wastes much space because null values   empty columns   still recorded further rdbmss have   limit     maximum number   columns per table eg 255   might   exceeded   some circumstances even   space   column constraints   unimportant necessitating alterations     table structure   application code each time   number   objects changes         system design approach other parts     dhcp schema   correctly designed   example     pharmacy subschema names   medications     hardcoded   columns   treated   data   id     drug     orders table references   list   drugs     drugs table therefore   make comparisons between eav   conventional schemas   realistic   first transformed   sensitivity data into   correct rowmodeled form where   antimicrobial id was an attribute     column   referenced   table   antimicrobial drug names  data extraction    extracted   dataset   va connecticut dhcp   contains     available online data   range   5187   92698   include results     than 135000 microbiology test specimens     than 400000 antimicrobial sensitivity tests     than 28000 patients   extracted data were transformed   storage into   sql server 70 rdbms   extraction was done   two steps   first created   conventional schema     data transforming   data where appropriate   described above     created an eavcr schema     conventional one   assigning   unique object id   each instance     particular class       were 965529 instantiated objects     database    conventional schema    conventional schema   shown      primary   foreign keys   well   fields used   search eg antimicrobial   organism names   indexed    should   noted     culture   antimicrobial sensitivity tables can   considered specialpurpose   homogeneous eav tables because each stores only   single class   data   rowmodeled form   contrast eav databases contain generalpurpose tables   store heterogeneous data across many classes    eavcr schema    eavcr physical schema   shown          eavcr schemas     two parts     schema metadata   data   eavcr metadata schema     illustrated   have been described   detail     summary   available     web    attributes   segregated   data type eg string values   stored   eavtex  whereas dates   held   eavdate    table eavobjects     particular interest   accommodates situations where one object can contain another object   permits objects     associated   one another     table   value field     id     child object thus     logical schema tests   children     specimen cultures   children     test   antimicrobial sensitivity results   children     culture   other words when data   hierarchic     consecutive one many relationships each record   eavobjects represents one node     tree   traverse down an object hierarchy starting     particular object   locate   objects id     objectid column   eavobjects     gather   values child object ids     entity     recurse searching   these ids     objectid column       one wellknown method   minimizing   number   recursive queries when traversing an object hierarchy     redundantly store   id     ancestor object against every record     tree       descendants     ancestor can   retrieved     single sql statement     significant percentage   queries also use   ancestor class   number   joins required   retrieve   data   also minimized   allow us   explore   means   schema optimization   its impact   queries   created an ancestor field containing   microbiology specimen id associated   each test value   eavtext   indexed   object id columns   created   compound index   attributevalue pairs   tables eavtext   eavdate since queries typically select data using both an attribute id   value together   search criteria   addition   separate index was created     value column   eavobjects since   nature     query might make   desirable   traverse an object hierarchy   descendant   ancestor  expanding   size     data    measure   effects   database size   performance   replicated   contents     initial two databases eavcrsmall   conventionalsmall   reassigned newly created unique ids   each new object   replicated data were   appended onto   corresponding original database   create new databases   twice   number   objects eavcrmedium   conventionalmedium   process was   repeated   yield databases four times larger than   originals eavcrbig   conventionalbig since   underlying schemas did   change queries did   require modification within   given representation   big data set represents   equivalent   30   40 years worth   microbiology data     patients   vamc connecticut   benchmark timings   eavcrmedium   conventionalmedium were intermediate between   smallest   largest representations     data showing an approximately linear trend between   small   big databases   purpose   studying three database sizes was   allow us   assess better how relative performance varied   size   minimize information overload     tables presented     remainder     paper   omit further discussion     two medium databases   eavcr representation consumed approximately four times   storage     conventional schema eavcrbig consumed 1177 mb   indexes accounting     than 62 percent   largest conventional representation conventionalbig was 301 mb   approximately 32 percent accounted     indexes     true   eavcr     spaceefficient   sparse data     case however prior   importing   raw data   had transformed   bulk     original sparse data eg   antimicrobial sensitivity results     cultures into dense rowmodeled facts   columns     mostly ids long integers     well known     rowmodeled conventional table   always take significantly less space than   equivalent facts represented   eav form     because   single set   facts   represented     single row     rowmodeled table     multiple rows   an eav table one per fact   example   fully describe   single antimicrobial sensitivity result   store several related facts linked     specimen id   microorganism   was isolated   antimicrobial tested     sensitivity     former     latter     eav representation each row has   extra overhead   object id   attribute id plus accompanying indexes  query benchmarking    compare performance between   two competing physical representations   developed several clinically oriented queries   follows   two attributecentered queries were   system description memory allocation  tests were conducted     dell dimension xps d300 running windows nt server 4     300mhz pentium ii processor   66mhz system bus execution times were recorded using   sql server 70 profiler tool   ran   benchmarks   192 mb   256 mb   physical ram   allocated 64 mb   128 mb respectively   sql server 7   did     ensure     additional ram was specifically allocated     database   left 128 mb   ram     operating system   its associated tasks   system employed   western digital udma 95ms 5400 rpm hard drive   want   emphasize however       benchmarks       ratio   timings between   eavcr   conventional schemas     important rather than   absolute timings  alternative formulation   eavcr queries  formulation     complex query against an eavcr database   significantly   difficult   errorprone than   formulation     functionally identical sql query against an equivalent conventional schema     because   physical schema   an eavcr database   actual tables holding   data  differs markedly   its logical schema   specifies how   classes modeled     database   related   each other   example when considering query 1   culture organism   patients tables     physically exist     eavcr schema     conventional schema   contrast logical   physical schemas   identical queries against an eavcr system must therefore   formulated   terms     semantics     logical schema   must     translated into operations     tables     physical schema   present four ways         third   fourth being slight modifications     second   follows method one    single large sql statement can   created   extracts   desired data   joining   necessary tables   an eavcr schema however   small set   physical tables   used   model many   logical tables   results     same tables being used repeatedly under different aliases   selfjoins being performed      illustrates   approach   query 1   table eavtext   used twice     logical schema becomes   complex     classes have     traversed such sql gets progressively harder   write   debug because   often incorporates   large number   nested constructs    complicate matters when   sql   sent   an rdbms   latter parses   code   tries   formulate an optimal strategy before executing   query optimization     problem known     factorial   respect     number   tables   aliases participating     join factorial 8   8 equals 8 x 7 x 6 x 2 x 1  40320 an excellent discussion     query optimization problem   posted    difficulties manifest therefore     number   aliases increase while dbms optimizers   claimed   their vendors   use clever heuristics   such   situation simply evaluating each     numerous alternatives takes time   an experiment reported   nadkarni   brandt an attempted 20alias join   would have yielded only 50 rows     result set caused an rdbms   freeze   only justifiable circumstances   using   singlestatement approach   eavcr query     queries     modest number   aliases          stored queries   facility available   many dbmss   execution   stored queries   parsing phase   bypassed because   query has already been compiled     speak     plan   execution already worked out  method two    second method uses   divide   conquer strategy   series   simple queries   specified   terms   individual classes     conceptual schema each query accesses one   two tables     time   create   temporary table   temporary tables     combined   joins using appropriate set operations intersection union difference   necessary when   final result   obtained temporary tables created along   way   deleted     particular case   dbms optimizer has   problem   individual queries   fact   execution plan devised   optimizers often involves creating temporary tables       explicitly telling   dbms         each step rather than relying     dbms   determine its own strategy  illustrates   method   query 1        course possible       dbms spends enough time analyzing   complex query     arrive     solution superior       have manually specified however   highly complex ad hoc queries unlike stored procedures   time required   devise an execution plan may   much greater than   time required   actually execute    method three    slight modification     second method     repopulate   empty existing indexed temporary tables instead   creating   deleting them   potential rationale       intermediate result sets created     simple query   large   when   result sets       combined   query optimizer   often create temporary indexes   speed up   join process     maintain several indexed tables     sole purpose   holding intermediate results   when   tables   populated through insert queries   indexes   also populated   subsequent joins     speeded up  illustrates   approach notice   very great similarity     code      only differences       use insert into select instead   select into   truncate table instead   drop table    strategy however   doubleedged   intermediate results   small     dbms may perform joins   memory rather than   disk       have created diskbased indexes   nothing index maintenance uses machine resources   time because whenever rows   removed   added     table   indexes     table must also   maintained  method four    minor modification     third method     use initially unindexed temporary tables     indexed only after   records   inserted record insertion   expected     faster because   indexes     have     maintained each time   new record   added     corresponding table   query   illustrated       applied   four methods   query 1 operating   eavcrbig   128mb ram allocated     database   found     second method developing simple queries   created tables   later removed them gave   best results   measuring caching effects  when   exact same query   sent     dbms multiple times   execution times     second   subsequent runs   often significantly shorter than     first     because   dbms uses caching either   memory     disk   sql string     query   stored       text     new query may   compared     along     execution plan     result set   small enough   may also   cached therefore   an extreme case   repeated query     cause any disk activity       dbms having decided       identical     previous one   instantaneously return   stored result     important   determine caching effects   conventional versus eavcr schemas especially   queries     latter consist     batch rather than   single statement     individual queries     batch might     cached   measure caching effects each query was executed five times   succession immediately following system startup   each combination   system memory   database size   used five runs   control   cold database   startup effects   report   timings   every query result   two ways   initial query execution time     cached execution time   average     four succeeding runs   former probably simulates   realworld situation   closely than   latter since     less likely   two different users     system   perform successive identical ad hoc queries  utilizing   ancestor field    also compared execution times   queries   made use     ancestor field construct   execution times   those   did     stated previously   use     ancestor field allows   composer     query   cheat   shorten   traversal path   suitable circumstances   was necessary   quantify   benefit obtained while recognizing   queries may   always   able   take advantage     field  monitoring system performance  operating system performance was monitored   windows nt performance monitor   conjunction   sql server objects   counters   recorded   following parameters  page read frequency     surrogate measure   disk    inputoutput efficiency   high percentage   hard disk activity     large number   disk reads per second suggest   potential disk    bottleneck finally   high degree   processor activity suggests   potential processorrelated bottleneck   performed these evaluations   query 1 during initial execution when   was   data caching     fifth run     sequence   five where caching effects were presumed     most significant sql server 7   windows nt provide system measurements every second   averaged these values over   duration     querys execution   obtain summary measurements  figure 1  entityrelationship diagram     microbiology data entityrelationship diagram     microbiology data   reasons   space some tables       relevant     queries     text     shown figure 2    conventional physical database schema   conventional physical database schema fields   some tables     shown   reasons   space     most part only fields linking   other fields   illustrated figure 3  eav physical database schema eav physical database schema since   eav tables share   same structure   details   two tables have been omitted figure 4  database query developed using   single sql statement database query developed using   single sql statement         next three figures attribute id 20 refers   organism name   id 9 refers   patient id figure 5  database query developed using temporary tables created   deleted dynamically   store interim data database query developed using temporary tables created   deleted dynamically   store interim data figure 6  database query developed using previously created   indexed tables   store interim data database query developed using previously created   indexed tables   store interim data figure 7  database query developed using unindexed tables   store interim data     indexed only after data   inserted into   tables database query developed using unindexed tables   store interim data     indexed only after data   inserted into   tables
10984467.txt 6 comparing different eavcr query strategies   attributecentered queries    stated earlier       least four different strategies   use when performing attributecentered queries   eavcr data prior   contrasting   eavcr   conventional schemas   different memory configurations   database sizes   had   decide     these strategies was most viable   report   comparative benchmarks   each approach   query 1 finding   patients   cultures positive   p aeruginosa  similar results were observed when these strategies were applied   query 2 find   specimens   s pneumoniae   c albicans   time difference   10 percent between   multiplestatement   singlestatement approaches     particularly dramatic   hypothesized however       number   classes involved     query increased these differences would become increasingly pronounced   tried out   new query find   patients   cultures positive   p aeruginosa   showed resistance   ceftazidime   query also involves   antimicrobialtested class   antimicrobial name attribute   initial execution times     multiplestatement   singlestatement queries were 194 sec compared   338 sec respectively   other words using multiple statements almost halved execution time   experience     line     reported     wellknown database article   stated   giant elegant sql statements   often too complex     limited intelligence     dbms optimizer because   these results   used   multiple statement approach   creation   temporary tables   benchmark eavcr query performance     remaining analyses  comparing performance     eavcr   conventional representations   entitycentered queries  queries     conventional   eavcr schemas gave comparable execution times    summarize increasing   volume     data     factor   four     small versus big databases had little effect   entitycentered queries     expected because   such queries   use indexes well   return small amounts   data search time tends   increase logarithmically rather than linearly   data size   results indicate   compared     eavcr schema   conventional schema may   marginally   efficient       since results   query 4   inconclusive     differences     large enough       major practical importance  comparing performance     eavcr   conventional representations   attributecentered queries   query 1 find   patients   cultures positive   p aeruginosa    conventional queries were three   five times faster than their eavcr counterparts     initial run   2   12 times faster     cached run   analyze   results below   increasing database size   system memory had little influence     ratio     initial run     smallest database greater available ram improved caching   eavcr queries     effect was lost     largest database using   ancestor field     eavcr query provided little     benefit     smallest database   reduced   time     large database here   benefits were most pronounced   64 mb   ram   time reduced     third   less   only one tenth     ram was added   number   page reads per second was consistently larger     eavcr schema particularly     database increased   size   suggests   physical disk        likely bottleneck     query operating     eavcr model  query 2 find   specimens positive   s pneumoniae   c albicans  here   eavcr queries   used   ancestor field were much faster than queries     conventional schema twice   fast     initial query six   eight times   fast when cached changing database size   increasing system memory had little effect   these ratios   when   ancestor field was   used   eavcr query took longer     difference   execution times widening   initial runs   database size increased   64 mb   ram allocated   ratios were 3     small databases   56     large databases     query 1 however   ratios decreased   32   33 respectively when 128 mb   ram was allocated   results indicate   while eavcr   generally less efficient than its conventional equivalent   inefficiency can   mitigated   least   part   additional memory   dramatic benefits     ancestor field specimen id   query 2   uses   field specifically should   put   perspective specifically incorporation     extra field     schema amounts   deliberate denormalization   standard space time tradeoff   could also have done       conventional schema   adding   specimen id column redundantly     cultures   antimicrobial sensitivity tables     case   altered conventional schema would almost certainly have outperformed   eavcr schema considerably    results   suggest     performance   certain types   commonly executed queries   critical     particular database judicious use   ancestor fields can exert     an impact than   schemas underlying design  e eavcr   conventional   many electronic patient record systems   example almost every item   data   tagged     id     patient   whom   directly   indirectly pertains because   very large portion   queries relates   individual patients  table 1  execution times   seconds   query 1 find   patients   cultures positive   pseudomonas aeruginosa table 2  execution times   seconds   query 2 find   specimens positive   both pseudomonas aeruginosa   candida albicans
10984467.txt 7   performed   pilot exploration   eavcr database efficiency issues   can help guide designers   programmers   eavcr databases such   electronic patient record systems       performance penalty   could expect     tried   execute complex queries     eavcr data directly rather than exporting subsets     data     conventional database   querying purposes however   following limitations     study must   noted   examined performance monitors     single database engine running     single operating system platform   chose   configuration largely because     available built  system monitoring tools   results generated here may   completely map   other database engines   operating systems identical queries conducted     two schemas using   microsoft access 97 database engine running   windows 98 however yielded qualitatively similar results   cannot predict how performance would   affected   increasing   database   sizes larger than those tested here   results suggest however     difference   performance appears   widen   database size increases   certain queries       can   offset   least   part   adding system memory   did   make use     parallel processing capabilities     sql server database engine since   employed   single processor machine   testing investigations   under way   study additional methods   optimize query generation   execution   databases were populated   data   one specific domain microbiology   cannot predict how performance times would differ     database populated   increasingly heterogeneous sources   data   would expect however     effort needed   develop queries would increase disproportionately     conventional schema compared     eavcr schema   logical schema     test database may       best candidate   demonstrating   full potential value   an eavcr schema since   data     exhibit sparseness   windows nt operating system performs certain background tasks   system maintenance   could conceivably affect specific performance runs   tried   minimize these effects   generously dedicating 128 mb   physical ram     operating system     times these     lessons   learned     exercise  while attributecentered eavcr queries   slower than queries   conventional schemas   does   disqualify eavcr schemas   consideration   warehousing biomedical data     complex schema   increased execution times   significantly offset   ease   database   query maintainability     eavcr model   conventional querys speed advantage being three   five times faster may appear     discouraging   eavcr     fact       longest eavcr query     fairly large data set took less than 35 min   complete continuing enhancements   cpu speed increasing ram capacity     availability   affordable multiprocessor machines   lower absolute times further even though   would benefit conventional   eav schemas equally   any case long query execution times tend     far less critical   non realtime attributecentered queries     often submitted   batch mode patientcentered queries typically submitted   an electronic patient record system   contrast demand quick response time perhaps   most compelling justification   moving eavcr data subsets   specially designed conventionally structured data marts   when users who demand response times     few seconds repeatedly query these subsets
10984467.txt 8   paper describes   pilot project   explore issues   query performance   eavcr   conventional database representations although   found   attributecentered queries performed less efficiently     eavcr model   feel   many     benefits inherent     eavcr representation help offset   decrease   performance purchasing   memory additional processors   faster hardware     combination   these may prove   very costeffective approach   handling these potential inefficiencies particularly     alternative     maintain two parallel versions     database   different structures   plan   continue building   optimizing query strategies   support   representation   well   testing its ability   handle increasingly complex databases   alternative biomedical domains
10984467.txt 9 
